buildscript {
    ext {
        restdocsApiSpecVersion = '0.17.1'
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.epages.restdocs-api-spec' version "0.17.1"
    id 'org.hidetake.swagger.generator' version "2.18.2"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'issac'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "2024.0.0")
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // mysql
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // mock mvc
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion

    // swagger
    swaggerUI 'org.webjars:swagger-ui:5.18.2'

    // asciidoctor
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // email sender
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // OpenSearch
    implementation "org.opensearch.client:opensearch-rest-client:2.11.0"
    implementation "org.opensearch.client:opensearch-java:2.7.0"
    implementation "jakarta.json:jakarta.json-api"

    //AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // spring batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // Firebase Admin SDK
    implementation 'com.google.firebase:firebase-admin:9.2.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    jvmArgs += ['-javaagent:' + configurations.testRuntimeClasspath.find { it.name.contains("byte-buddy-agent") }.absolutePath]
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}
openapi3 {
    servers = [
            { url = "/" }
    ]
    title = 'ISSAC API'
    description = 'ISSAC API DOCUMENT'
    version = '0.0.1'
    format = 'yaml' // or json
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

        def securitySchemesContent = "  securitySchemes:\n" +   \
                                       "    APIKey:\n" +   \
                                       "      type: apiKey\n" +   \
                                       "      name: Authorization\n" +   \
                                       "      in: header\n" +  \
                                       "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

asciidoctor {
    configurations 'asciidoctorExt' // Asciidoctor 확장 의존성 설정
    baseDirFollowsSourceFile() // 소스 파일의 경로를 기준으로 설정
    inputs.dir snippetsDir // RestDocs 생성 스니펫 입력
    dependsOn test // 테스트 태스크 완료 후 실행
}
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}
tasks.register('copyOasToSwagger', Copy) {
    dependsOn asciidoctor

    from("${asciidoctor.outputDir}")
    into "src/main/resources/static/docs"

    dependsOn generateSwaggerUISample

    from("${buildDir}/swagger-ui-sample")
    into "src/main/resources/static/docs"

    doLast {
        def indexFile = file("src/main/resources/static/docs/index.html")
        if (indexFile.exists()) {
            def script = """
            <script src="/js/custom-swagger.js"></script>
            """
            indexFile.text = indexFile.text.replace("</body>", script + "\n</body>")
        }
    }
}

bootJar {
    dependsOn 'asciidoctor'
    dependsOn 'generateSwaggerUISample'
    dependsOn 'copyOasToSwagger'
}